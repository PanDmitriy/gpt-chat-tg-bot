import { Context } from 'telegraf';
import { BotContext } from '../types';
import { AsteroidsApi } from '../../../features/asteroids/api';
import { config } from '../../../app/config';

const asteroidsApi = new AsteroidsApi(config.nasa.apiKey);

export async function handleAsteroids(ctx: Context & BotContext) {
  try {
    const asteroids = await asteroidsApi.getNearEarthObjects(7);
    
    if (!asteroids || asteroids.length === 0) {
      await ctx.reply('üåç –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –Ω–µ –±—ã–ª–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤, –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –∫ –ó–µ–º–ª–µ.');
      return;
    }

    const hazardousAsteroids = asteroids.filter(a => a.is_potentially_hazardous_asteroid);
    const nonHazardousAsteroids = asteroids
      .filter(a => !a.is_potentially_hazardous_asteroid)
      .sort((a, b) => {
        const distanceA = parseFloat(a.close_approach_data[0].miss_distance.kilometers);
        const distanceB = parseFloat(b.close_approach_data[0].miss_distance.kilometers);
        return distanceA - distanceB;
      })
      .slice(0, 5); // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 5 –±–ª–∏–∂–∞–π—à–∏—Ö –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await ctx.reply(`‚òÑÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Å—Ç–µ—Ä–æ–∏–¥–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π</b>\n\n` +
      `‚ö†Ô∏è <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö:</b> ${hazardousAsteroids.length}\n` +
      `üü¢ <b>–ë–ª–∏–∂–∞–π—à–∏—Ö –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö:</b> ${nonHazardousAsteroids.length} –∏–∑ ${asteroids.length - hazardousAsteroids.length}`, 
      { parse_mode: 'HTML' });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–∞—Å–Ω—ã—Ö –∞—Å—Ç–µ—Ä–æ–∏–¥–∞—Ö
    if (hazardousAsteroids.length > 0) {
      let message = `‚ö†Ô∏è <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –∞—Å—Ç–µ—Ä–æ–∏–¥—ã:</b>\n\n`;
      for (const asteroid of hazardousAsteroids) {
        const approach = asteroid.close_approach_data[0];
        message += `üî¥ <b>${asteroid.name}</b>\n` +
          `üìè <b>–î–∏–∞–º–µ—Ç—Ä:</b> ${asteroid.estimated_diameter.meters.estimated_diameter_min.toFixed(0)} - ${asteroid.estimated_diameter.meters.estimated_diameter_max.toFixed(0)} –º\n` +
          `üìÖ <b>–î–∞—Ç–∞ —Å–±–ª–∏–∂–µ–Ω–∏—è:</b> ${new Date(approach.close_approach_date).toLocaleString('ru-RU')}\n` +
          `‚ö° <b>–°–∫–æ—Ä–æ—Å—Ç—å:</b> ${parseFloat(approach.relative_velocity.kilometers_per_hour).toFixed(0)} –∫–º/—á\n` +
          `üåç <b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</b> ${(parseFloat(approach.miss_distance.kilometers) / 1000).toFixed(0)} —Ç—ã—Å. –∫–º\n\n`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç–∏–≥–ª–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
        if (message.length > 3000) {
          await ctx.reply(message, { parse_mode: 'HTML' });
          message = '';
        }
      }
      if (message) {
        await ctx.reply(message, { parse_mode: 'HTML' });
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∏–∂–∞–π—à–∏—Ö –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∞—Å—Ç–µ—Ä–æ–∏–¥–∞—Ö
    if (nonHazardousAsteroids.length > 0) {
      let message = `üü¢ <b>–ë–ª–∏–∂–∞–π—à–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∞—Å—Ç–µ—Ä–æ–∏–¥—ã:</b>\n\n`;
      for (const asteroid of nonHazardousAsteroids) {
        const approach = asteroid.close_approach_data[0];
        message += `üîµ <b>${asteroid.name}</b>\n` +
          `üìè <b>–î–∏–∞–º–µ—Ç—Ä:</b> ${asteroid.estimated_diameter.meters.estimated_diameter_min.toFixed(0)} - ${asteroid.estimated_diameter.meters.estimated_diameter_max.toFixed(0)} –º\n` +
          `üìÖ <b>–î–∞—Ç–∞ —Å–±–ª–∏–∂–µ–Ω–∏—è:</b> ${new Date(approach.close_approach_date).toLocaleString('ru-RU')}\n` +
          `‚ö° <b>–°–∫–æ—Ä–æ—Å—Ç—å:</b> ${parseFloat(approach.relative_velocity.kilometers_per_hour).toFixed(0)} –∫–º/—á\n` +
          `üåç <b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</b> ${(parseFloat(approach.miss_distance.kilometers) / 1000).toFixed(0)} —Ç—ã—Å. –∫–º\n\n`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç–∏–≥–ª–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
        if (message.length > 3000) {
          await ctx.reply(message, { parse_mode: 'HTML' });
          message = '';
        }
      }
      if (message) {
        await ctx.reply(message, { parse_mode: 'HTML' });
      }
    }
  } catch (error) {
    console.error('Asteroids Error:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞—Å—Ç–µ—Ä–æ–∏–¥–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
} 