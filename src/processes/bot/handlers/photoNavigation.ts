import { Context } from 'telegraf';
import { BotContext } from '../types';
import { handleMarsNavigation } from './mars';
import { createPhotoNavigationKeyboard } from '../../../shared/ui/keyboard';
import { MarsPhoto } from '../../../features/mars/api';

interface PhotoViewState {
  photos: MarsPhoto[];
  currentIndex: number;
  messageId?: number;
}

export async function handlePhotoNavigation(ctx: Context & BotContext) {
  const callbackQuery = ctx.callbackQuery;
  if (!callbackQuery || !('data' in callbackQuery)) return;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –ú–∞—Ä—Å–∞
  if (callbackQuery.data.startsWith('prev_photo') || callbackQuery.data.startsWith('next_photo')) {
    await handleMarsNavigation(ctx);
    return;
  }

  if (!ctx.session) {
    await ctx.answerCbQuery('–°–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
    return;
  }

  if (!ctx.session.photoViewState) {
    await ctx.answerCbQuery('–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
    return;
  }

  const state = ctx.session.photoViewState;

  try {
    switch (callbackQuery.data) {
      case 'first_photo':
        state.currentIndex = 0;
        await updatePhotoMessage(ctx, state);
        break;

      case 'last_photo':
        state.currentIndex = state.photos.length - 1;
        await updatePhotoMessage(ctx, state);
        break;

      case 'close_photos':
        if (state.messageId) {
          await ctx.telegram.deleteMessage(ctx.chat!.id, state.messageId);
        }
        ctx.session.photoViewState = undefined;
        break;

      case 'photo_info':
        await ctx.answerCbQuery(`–§–æ—Ç–æ ${state.currentIndex + 1} –∏–∑ ${state.photos.length}`);
        break;
    }
  } catch (error) {
    console.error('Error handling photo navigation:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è');
  }
}

async function updatePhotoMessage(ctx: Context & BotContext, state: PhotoViewState) {
  if (!state.photos || state.photos.length === 0) {
    await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    return;
  }

  const photo = state.photos[state.currentIndex];
  const keyboard = createPhotoNavigationKeyboard(state.currentIndex, state.photos.length);

  try {
    if (state.messageId) {
      await ctx.telegram.editMessageMedia(
        ctx.chat!.id,
        state.messageId,
        undefined,
        {
          type: 'photo',
          media: photo.img_src,
          caption: formatPhotoMessage(photo, state.currentIndex, state.photos.length),
          parse_mode: 'HTML'
        },
        { reply_markup: keyboard }
      );
    } else {
      const message = await ctx.replyWithPhoto(photo.img_src, {
        caption: formatPhotoMessage(photo, state.currentIndex, state.photos.length),
        parse_mode: 'HTML',
        reply_markup: keyboard
      });
      state.messageId = message.message_id;
    }
  } catch (error) {
    console.error('Error updating photo message:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

function formatPhotoMessage(photo: MarsPhoto, currentIndex: number, totalPhotos: number): string {
  return `üì∏ –§–æ—Ç–æ —Å –ú–∞—Ä—Å–∞\n\n` +
    `–ö–∞–º–µ—Ä–∞: ${photo.camera.full_name}\n` +
    `–ú–∞—Ä—Å–æ—Ö–æ–¥: ${photo.rover.name}\n` +
    `–î–∞—Ç–∞: ${new Date(photo.earth_date).toLocaleString('ru-RU')}\n` +
    `–°–æ–ª: ${photo.sol}\n\n` +
    `–§–æ—Ç–æ ${currentIndex + 1} –∏–∑ ${totalPhotos}`;
} 