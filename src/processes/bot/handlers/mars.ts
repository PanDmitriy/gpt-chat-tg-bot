import { Context } from 'telegraf';
import { BotContext } from '../types';
import { MarsApi } from '../../../features/mars/api';
import { createPhotoNavigationKeyboard } from '../../../shared/ui/keyboard';
import { MarsPhoto } from '../../../features/mars/api';

const marsApi = new MarsApi(process.env.NASA_API_KEY || '');

interface MarsSession {
  marsPhotos?: MarsPhoto[];
  currentPhotoIndex?: number;
}

async function sendMarsPhoto(ctx: Context & BotContext & { session?: MarsSession }, index: number) {
  if (!ctx.session?.marsPhotos) return;

  const photos = ctx.session.marsPhotos;
  const photo = photos[index];

  await ctx.replyWithPhoto(photo.img_src, {
    caption: `üöÄ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å –º–∞—Ä—Å–æ—Ö–æ–¥–∞ ${photo.rover.name}\n` +
      `üìÖ –î–∞—Ç–∞: ${new Date(photo.earth_date).toLocaleString('ru-RU')}\n` +
      `üì∑ –ö–∞–º–µ—Ä–∞: ${photo.camera.full_name}\n` +
      `üåû –°–æ–ª: ${photo.sol}`,
    reply_markup: createPhotoNavigationKeyboard(index, photos.length)
  });
}

export async function handleMars(ctx: Context & BotContext): Promise<void> {
  try {
    await ctx.reply('ü™ê –ü–æ–ª—É—á–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ú–∞—Ä—Å–∞...');

    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    let photos = await marsApi.getLatestMarsPhotos('curiosity', 1000, 'NAVCAM');
    
    if (photos.length === 0) {
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å NAVCAM, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∫–∞–º–µ—Ä—ã
      photos = await marsApi.getLatestMarsPhotos('curiosity', 1000, 'MAST');
    }

    if (photos.length === 0) {
      // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Å–æ–ª
      photos = await marsApi.getLatestMarsPhotos('curiosity', 500);
    }

    if (photos.length === 0) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ú–∞—Ä—Å–∞');
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Å–µ—Å—Å–∏—é
    if (!ctx.session) {
      ctx.session = {};
    }
    ctx.session.marsPhotos = photos;
    ctx.session.currentPhotoIndex = 0;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    await sendMarsPhoto(ctx, 0);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ú–∞—Ä—Å–∞:', error);
    await ctx.reply('‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ú–∞—Ä—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

export async function handleMarsNavigation(ctx: Context & BotContext & { session?: MarsSession }) {
  if (!ctx.session?.marsPhotos || ctx.session.currentPhotoIndex === undefined) {
    await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ú–∞—Ä—Å–∞ –∫–æ–º–∞–Ω–¥–æ–π /mars');
    return;
  }

  const callbackQuery = ctx.callbackQuery;
  if (!callbackQuery || !('data' in callbackQuery)) return;

  const photos = ctx.session.marsPhotos;
  let newIndex = ctx.session.currentPhotoIndex;

  if (callbackQuery.data === 'prev_photo') {
    newIndex = Math.max(0, newIndex - 1);
  } else if (callbackQuery.data === 'next_photo') {
    newIndex = Math.min(photos.length - 1, newIndex + 1);
  }

  if (newIndex !== ctx.session.currentPhotoIndex) {
    ctx.session.currentPhotoIndex = newIndex;
    await ctx.answerCbQuery();
    await sendMarsPhoto(ctx, newIndex);
  } else {
    await ctx.answerCbQuery('–≠—Ç–æ –ø–µ—Ä–≤–∞—è/–ø–æ—Å–ª–µ–¥–Ω—è—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è');
  }
} 