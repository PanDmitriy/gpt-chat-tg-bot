import { Context } from 'telegraf';
import { BotContext } from '../types';
import { IssApi } from '../../../features/iss/api';
import { config } from '../../../app/config';
import { createPhotoNavigationKeyboard } from '../../../shared/ui/keyboard';

const issApi = new IssApi(config.nasa.apiKey);

export async function handleISS(ctx: Context & BotContext) {
  try {
    const data = await issApi.getIssPosition();
    
    const latitude = parseFloat(data.iss_position.latitude as any);
    const longitude = parseFloat(data.iss_position.longitude as any);

    const message = `üõ∞Ô∏è –ú–ö–° —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:\n` +
      `–®–∏—Ä–æ—Ç–∞: ${latitude.toFixed(2)}¬∞\n` +
      `–î–æ–ª–≥–æ—Ç–∞: ${longitude.toFixed(2)}¬∞\n\n` +
      `–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date(data.timestamp * 1000).toLocaleString('ru-RU')}`;

    await ctx.reply(message, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üó∫Ô∏è Google Maps', url: `https://www.google.com/maps/search/?api=1&query=${latitude},${longitude}` },
            { text: 'üìç –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã', url: `https://yandex.ru/maps/?text=${latitude},${longitude}` }
          ]
        ]
      }
    });
  } catch (error) {
    console.error('ISS Error:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –ú–ö–°. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
} 