import { Context } from 'telegraf';
import { BotContext } from '../types';
import { IssApi } from '../../../features/iss/api';
import { config } from '../../../app/config';

interface IssPosition {
  latitude: number;
  longitude: number;
}

interface IssData {
  iss_position: IssPosition;
  timestamp: number;
}

const issApi = new IssApi(config.nasa.apiKey);

export async function handleISS(ctx: Context & BotContext) {
  try {
    const data = await issApi.getIssPosition() as IssData;
    
    const latitude = data.iss_position.latitude;
    const longitude = data.iss_position.longitude;

    const message = `üõ∞Ô∏è <b>–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–Ω—Ü–∏—è</b>\n\n` +
      `üìç <b>–¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b>\n` +
      `   ‚Ä¢ –®–∏—Ä–æ—Ç–∞: ${latitude.toFixed(2)}¬∞\n` +
      `   ‚Ä¢ –î–æ–ª–≥–æ—Ç–∞: ${longitude.toFixed(2)}¬∞\n\n` +
      `üïí <i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date(data.timestamp * 1000).toLocaleString('ru-RU')}</i>`;

    await ctx.reply(message, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üó∫Ô∏è Google Maps', url: `https://www.google.com/maps/search/?api=1&query=${latitude},${longitude}` },
            { text: 'üìç –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã', url: `https://yandex.ru/maps/?text=${latitude},${longitude}` }
          ]
        ]
      },
      parse_mode: 'HTML'
    });
  } catch (error) {
    console.error('ISS Error:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –ú–ö–°. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
} 