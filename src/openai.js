import { OpenAI } from 'openai';
import { createReadStream, promises as fsPromises } from 'fs';
import dotenv from 'dotenv';
dotenv.config();

  class OpenAIService {
  roles = {
    SYSTEM: "system",
    USER: "user",
    ASSISTANT: "assistant"
  }

  client = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
  

  async chat(messages) {
    try {
      if (!process.env.OPENAI_API_KEY) {
        console.warn('‚ö†Ô∏è OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞.');
        return {
          role: this.roles.ASSISTANT,
          content: "üîí API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ."
        };
      }
  
      const response = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages,
      });
  
      return response.choices[0].message;
    } catch (e) {
      console.error('üö´ –û—à–∏–±–∫–∞ OpenAI:', e.message);
  
      // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞-–æ—Ç–≤–µ—Ç –Ω–∞ –æ—à–∏–±–∫—É
      return {
        role: this.roles.ASSISTANT,
        content: "ü§ñ –°–µ–π—á–∞—Å —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ GPT, –Ω–æ —Å–∫–æ—Ä–æ –≤—Å—ë –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç!"
      };
    }
  };

  async transcription(filepath) {
    try {
      if (!process.env.OPENAI_API_KEY) {
        console.warn('‚ö†Ô∏è OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.');
        await fsPromises.unlink(filepath);
        return 'üîí –ö–ª—é—á API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–≥–ª—É—à–∫–∞: –∑–¥–µ—Å—å –±—ã–ª –±—ã —Ç–µ–∫—Å—Ç —Å –∞—É–¥–∏–æ.';
      }
  
      const response = await this.openai.audio.transcriptions.create(
        createReadStream(filepath),
        'whisper-1'
      );
  
      await fsPromises.unlink(filepath);
      return response.text;
  
    } catch (e) {
      console.error('üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ:', e.message);
      await fsPromises.unlink(filepath);
  
      // –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
      return 'ü§ñ –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!';
    }
  }
}

export const openai = new OpenAIService();
