import dotenv from 'dotenv';
dotenv.config();

import { Telegraf, Context } from 'telegraf';
import { code } from 'telegraf/format';
import { nasa } from './nasa.js';
import { Command, NasaPhoto, ISSLocation } from './types/index.js';

interface BotContext extends Context {
  session?: any;
}

const COMMANDS: Command[] = [
  { command: "start", description: "–ó–∞–ø—É—Å–∫" },
  { command: "apod", description: "NASA. –ê—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ç–æ –¥–Ω—è" },
  { command: "iss", description: "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –≥–¥–µ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–Ω—Ü–∏—è" }
];

const bot = new Telegraf<BotContext>(process.env.TELEGRAM_BOT_TOKEN || '');
bot.telegram.setMyCommands(COMMANDS);

/** –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ */
bot.command('start', async (ctx) => {
  await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NASA –±–æ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n/apod - –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –¥–Ω—è\n/iss - —É–∑–Ω–∞—Ç—å –≥–¥–µ –ú–ö–°');
});

/** NASA */
bot.command('apod', async (ctx) => {
  try {
    const photo = await nasa.getPhotoOfDay();
    await ctx.replyWithPhoto(photo.url, { caption: photo.title });
    await ctx.reply(photo.explanation);
    if (photo.copyright) {
      await ctx.reply(`–ê–≤—Ç–æ—Ä ${photo.copyright}`);
    }
  } catch (error) {
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –¥–Ω—è');
    console.error('Error in apod command:', error);
  }
});

bot.command('iss', async (ctx) => {
  try {
    const data = await nasa.getISSLocation();
    if (!data || data.message !== 'success') {
      return ctx.reply('üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –ú–ö–°.');
    }

    const { latitude, longitude } = data.iss_position;
    const mapUrl = `https://www.openstreetmap.org/?mlat=${latitude}&mlon=${longitude}#map=4/${latitude}/${longitude}`;

    await ctx.reply(`üõ∞Ô∏è –°–µ–π—á–∞—Å –ú–ö–° –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ—á–∫–µ:\n\nüåç –®–∏—Ä–æ—Ç–∞: ${latitude}\nüåê –î–æ–ª–≥–æ—Ç–∞: ${longitude}\n\nüìç [–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ](${mapUrl})`, {
      parse_mode: 'Markdown',
    });
  } catch (error) {
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ú–ö–°');
    console.error('Error in iss command:', error);
  }
});

/** Start bot */
bot.launch();

/** –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ NODE */
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM')); 