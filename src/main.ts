import dotenv from 'dotenv';
dotenv.config();

import { Telegraf, session, Context } from 'telegraf';
import { code } from 'telegraf/format';
import { message } from 'telegraf/filters';
import { ogg } from './ogg.js';
import { openai } from './openai.js';
import { nasa } from './nasa.js';
import { Session, Command, NasaPhoto, ISSLocation } from './types/index.js';

interface BotContext extends Context {
  session?: Session;
}

const INIT_SESSION: Session = {
  messages: [],
};

const COMMANDS: Command[] = [
  { command: "start", description: "–ó–∞–ø—É—Å–∫" },
  { command: "new", description: "–ù–æ–≤—ã–π —á–∞—Ç —Å GPT" },
  { command: "apod", description: "NASA. –ê—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ç–æ –¥–Ω—è" },
  { command: "iss", description: "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –≥–¥–µ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–Ω—Ü–∏—è" }
];

const bot = new Telegraf<BotContext>(process.env.TELEGRAM_BOT_TOKEN || '');
bot.use(session());
bot.telegram.setMyCommands(COMMANDS);

/** –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ */
bot.command('start', async (ctx) => {
  ctx.session = INIT_SESSION;
  await ctx.reply('–ñ–¥—É –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–ª–∏ —Ç–µ–∫—Å–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');
});

bot.command('new', async (ctx) => {
  ctx.session = INIT_SESSION;
  await ctx.reply('–ñ–¥—É –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–ª–∏ —Ç–µ–∫—Å–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');
});

/** NASA */
bot.command('apod', async (ctx) => {
  try {
    const photo = await nasa.getPhotoOfDay();
    await ctx.replyWithPhoto(photo.url, { caption: photo.title });
    await ctx.reply(photo.explanation);
    if (photo.copyright) {
      await ctx.reply(`–ê–≤—Ç–æ—Ä ${photo.copyright}`);
    }
  } catch (error) {
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –¥–Ω—è');
    console.error('Error in apod command:', error);
  }
});

bot.command('iss', async (ctx) => {
  try {
    const data = await nasa.getISSLocation();
    if (!data || data.message !== 'success') {
      return ctx.reply('üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –ú–ö–°.');
    }

    const { latitude, longitude } = data.iss_position;
    const mapUrl = `https://www.openstreetmap.org/?mlat=${latitude}&mlon=${longitude}#map=4/${latitude}/${longitude}`;

    await ctx.reply(`üõ∞Ô∏è –°–µ–π—á–∞—Å –ú–ö–° –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ—á–∫–µ:\n\nüåç –®–∏—Ä–æ—Ç–∞: ${latitude}\nüåê –î–æ–ª–≥–æ—Ç–∞: ${longitude}\n\nüìç [–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ](${mapUrl})`, {
      parse_mode: 'Markdown',
    });
  } catch (error) {
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ú–ö–°');
    console.error('Error in iss command:', error);
  }
});

/** –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è */
bot.on(message('text'), async (ctx) => {
  try {
    if (!ctx.session) {
      ctx.session = INIT_SESSION;
    }
    await ctx.reply(code('–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è–ª. –ñ–¥—É –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.'));
    ctx.session.messages.push({ role: 'user', content: ctx.message.text });

    const response = await openai.chat(ctx.session.messages);
    ctx.session.messages.push({ role: 'assistant', content: response.content });

    await ctx.reply(response.content);
  } catch (error) {
    await ctx.reply(code('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞'));
    console.error('Error while processing text message:', error);
  }
});

/** –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è */
bot.on(message('voice'), async (ctx) => {
  try {
    if (!ctx.session) {
      ctx.session = INIT_SESSION;
    }

    await ctx.reply(code('–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è–ª. –ñ–¥—É –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.'));
    const voiceMessageFileLink = await ctx.telegram.getFileLink(ctx.message.voice.file_id);
    const userId = String(ctx.message.from.id);

    const oggPath = await ogg.create(voiceMessageFileLink.href, userId);
    const mp3Path = await ogg.toMp3(oggPath, userId);

    const text = await openai.transcription(mp3Path);
    await ctx.reply(`–í–∞—à –∑–∞–ø—Ä–æ—Å: ${text}`);

    ctx.session.messages.push({ role: 'user', content: text });

    const response = await openai.chat(ctx.session.messages);
    ctx.session.messages.push({ role: 'assistant', content: response.content });

    await ctx.reply(response.content);
  } catch (error) {
    await ctx.reply(code('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞'));
    console.error('Error while processing voice message:', error);
  }
});

/** Start bot */
bot.launch();

/** –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ NODE */
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM')); 