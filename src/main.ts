import dotenv from 'dotenv';
dotenv.config();

import { Telegraf, Context } from 'telegraf';
import { code } from 'telegraf/format';
import { nasa } from './nasa.js';
import { Command, NasaPhoto, ISSLocation, EPICImage } from './types/index.js';
import { InlineKeyboard } from 'telegraf/typings/core/types/typegram';

interface BotContext extends Context {
  session?: any;
}

const COMMANDS: Command[] = [
  { command: "start", description: "–ó–∞–ø—É—Å–∫" },
  { command: "apod", description: "NASA. –ê—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ç–æ –¥–Ω—è" },
  { command: "iss", description: "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –≥–¥–µ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ú–ö–°" },
  { command: "earth", description: "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–Ω–∏–º–æ–∫ –ó–µ–º–ª–∏ –∏–∑ –∫–æ—Å–º–æ—Å–∞" }
];

const bot = new Telegraf<BotContext>(process.env.TELEGRAM_BOT_TOKEN || '');
bot.telegram.setMyCommands(COMMANDS);

/** –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ */
bot.command('start', async (ctx) => {
  await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NASA –±–æ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
    '/apod - –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –¥–Ω—è\n' +
    '/iss - —É–∑–Ω–∞—Ç—å –≥–¥–µ –ú–ö–°');
});

/** NASA */
bot.command('apod', async (ctx) => {
  try {
    const photo = await nasa.getPhotoOfDay();
    await ctx.replyWithPhoto(photo.url, { caption: photo.title });
    await ctx.reply(photo.explanation);
    if (photo.copyright) {
      await ctx.reply(`–ê–≤—Ç–æ—Ä ${photo.copyright}`);
    }
  } catch (error) {
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –¥–Ω—è');
    console.error('Error in apod command:', error);
  }
});

bot.command('iss', async (ctx) => {
  try {
    const data = await nasa.getISSLocation();
    
    const date = new Date(data.timestamp * 1000);
    const formattedDate = date.toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });

    const message = `üõ∞Ô∏è *–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–Ω—Ü–∏—è*\n\n` +
      `üåç *–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:*\n` +
      `–®–∏—Ä–æ—Ç–∞: ${data.latitude.toFixed(4)}¬∞\n` +
      `–î–æ–ª–≥–æ—Ç–∞: ${data.longitude.toFixed(4)}¬∞\n\n` +
      `üìä *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–±–∏—Ç—ã:*\n` +
      `–°–∫–æ—Ä–æ—Å—Ç—å: ${(data.velocity * 3.6).toFixed(2)} –∫–º/—á\n` +
      `–í—ã—Å–æ—Ç–∞: ${data.altitude.toFixed(2)} –∫–º\n` +
      `–í–∏–¥–∏–º–æ—Å—Ç—å: ${data.visibility}\n` +
      `–ó–æ–Ω–∞ –ø–æ–∫—Ä—ã—Ç–∏—è: ${data.footprint.toFixed(2)} –∫–º\n\n` +
      `‚òÄÔ∏è *–°–æ–ª–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è:*\n` +
      `–®–∏—Ä–æ—Ç–∞: ${data.solar_lat.toFixed(2)}¬∞\n` +
      `–î–æ–ª–≥–æ—Ç–∞: ${data.solar_lon.toFixed(2)}¬∞\n\n` +
      `üïí *–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:*\n` +
      `${formattedDate}`;

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üó∫Ô∏è Google Maps', url: `https://www.google.com/maps/search/?api=1&query=${data.latitude},${data.longitude}` },
          { text: 'üìç –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã', url: `https://yandex.ru/maps/?text=${data.latitude},${data.longitude}` }
        ],
      ]
    };

    await ctx.reply(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Error in iss command:', error);
    await ctx.reply('üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ú–ö–°. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

bot.command('earth', async (ctx) => {
  try {
    const image = await nasa.getEarthImage();
    
    const date = new Date(image.date);
    const formattedDate = date.toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });

    const message = `üåç *–°–Ω–∏–º–æ–∫ –ó–µ–º–ª–∏ –∏–∑ –∫–æ—Å–º–æ—Å–∞*\n\n` +
      `üìÖ –î–∞—Ç–∞: ${formattedDate}\n` +
      `üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—ä–µ–º–∫–∏:\n` +
      `–®–∏—Ä–æ—Ç–∞: ${image.lat.toFixed(2)}¬∞\n` +
      `–î–æ–ª–≥–æ—Ç–∞: ${image.lon.toFixed(2)}¬∞\n\n` +
      `üõ∞Ô∏è –°–Ω—è—Ç–æ —Å –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –∞–ø–ø–∞—Ä–∞—Ç–∞ DSCOVR`;

    await ctx.replyWithPhoto(image.image, {
      caption: message,
      parse_mode: 'Markdown'
    });
  } catch (error) {
    console.error('Error in earth command:', error);
    await ctx.reply('üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–Ω–∏–º–∫–∞ –ó–µ–º–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

/** Start bot */
bot.launch();

/** –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ NODE */
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM')); 